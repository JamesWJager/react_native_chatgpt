{
  "extends": "@tsconfig/react-native/tsconfig.json",
  "compilerOptions": {
    /* Options handle by @tsconfig/react-native/tsconfig.json */
    // @tsconfig/react-native/tsconfig.json default "esnext"
    // "target": "esnext"                     /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
    // @tsconfig/react-native/tsconfig.json default "commonjs"
    // "module": "commonjs"                   /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
    // @tsconfig/react-native/tsconfig.json default ["react-native", "jest"]
    // "lib": ["esnext", "dom"]               /* Specify library files to be included in the compilation. */,
    // @tsconfig/react-native/tsconfig.json default true
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // @tsconfig/react-native/tsconfig.json default "react-native"
    // "jsx": "react-native"                  /* Specify JSX code generation: 'preserve', 'react-jsx', or 'react'. */,
    // @tsconfig/react-native/tsconfig.json default true
    // "noEmit": false                        /* Do not emit outputs. */,
    // @tsconfig/react-native/tsconfig.json default true
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    // @tsconfig/react-native/tsconfig.json default true
    // "strict": true                         /* Enable all strict type-checking options. */,
    // @tsconfig/react-native/tsconfig.json default "node"
    // "moduleResolution": "node"             /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
    // @tsconfig/react-native/tsconfig.json default ["react-native", "jest"]
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // @tsconfig/react-native/tsconfig.json default true
    // "allowSyntheticDefaultImports": true   /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
    // @tsconfig/react-native/tsconfig.json default true
    // "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // @tsconfig/react-native/tsconfig.json default true
    // "skipLibCheck": true
    // @tsconfig/react-native/tsconfig.json default true
    // "forceConsistentCasingInFileNames": true
    // @tsconfig/react-native/tsconfig.json default true
    // "resolveJsonModule": true

    /* Basic Options */
    // "checkJs": true,                       /* Report errors in .js files. */
    "declaration": false /* Generates corresponding '.d.ts' file. */,
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "sourceMap": true /* Generates corresponding '.map' file. */,
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    // "outDir": "./dist/",                   /* Redirect output structure to the directory. */
    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* Enable project compilation */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "importHelpers": true                  /* Import emit helpers from 'tslib'. */,
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */

    /* Strict Type-Checking Options */
    "noImplicitAny": true /* Raise error on expressions and declarations with an implied 'any' type. */,
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    "noImplicitThis": true /* Raise error on 'this' expressions with an implied 'any' type. */,
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */
    /* Additional Checks */
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
    /* Module Resolution Options */

    "baseUrl": "./" /* Base directory to resolve non-absolute module names. */,
    "paths": {
      "@*": ["./src/*"]
    } /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */,
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */

    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    "inlineSourceMap": false /* Emit a single file with source maps instead of having a separate file. */,
    "inlineSources": true /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */,

    /* Experimental Options */
    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
    "emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */
  },
  "typeRoots": ["./src/@types"],
  "include": [
    "./src",
    "index.js",
    "src/@types/app.d.ts",
    "src/@types/env.d.ts",
    "__tests__",
    "eslint.config.js",
    "babel.config.js",
    "metro.config.js",
    "tailwind.config.cjs"
  ],
  "exclude": ["tsconfig.json", "node_modules", "ios", "android", ".bundle"]
}
